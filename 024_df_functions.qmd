# Working with data frames and functions {#sec-working-with-data-frames-and-functions}

## What is in a function? BMI example

-   Let's create a BMI function

-   First a simple function that simply prints a given height and weight

```{r echo=TRUE, eval=TRUE, error=TRUE}
paste.heightweight<-function(h,w){
  print(paste(h,w))
  }
paste.heightweight(1.8,80) #you provide the 2 arguments and get the output
```

Now let's do the computation with the BMI calculation with a new function

```{r echo=TRUE, eval=TRUE, error=TRUE}
bmi.calc<-function(h,w){w/h^2}
```

which we apply

```{r echo=TRUE, eval=TRUE, error=TRUE}
bmi.calc(1.8,80)
```

A function can take a sequence of processes (e.g compute, rounds, concatenate a sentence,...) and then returns the result of the last process.

Example

```{r echo=TRUE, eval=TRUE, error=TRUE}
bmi.calc.text<-function(h,w){
  b<-w/h^2
  brounded<-round(b)
  paste("My BMI is", brounded, "kg/m2")
}
bmi.calc.text(1.8,80)
```

For clarity the outcome of the function can be put in a return()

```{r echo=TRUE, eval=TRUE, error=TRUE}
bmi.calc<-function(h,w){
  return(round(w/h^2))
}
bmi.calc(1.8,80)
```

## Applying a function to a data frame column

Let's create a 2nd function to transfors degrees from Celsius to Fahrenheit

Simpler with a single argument (x):

```{r echo=TRUE, eval=TRUE}
celsius2fahrenheit<-function(x){round(32+(x*9/5))}

celsius2fahrenheit(25) #25 celsius degree is thus 
```

Which we now apply to a series of values stored in a column within a data frame

```{r, echo=TRUE, eval=TRUE}
mytable<-data.frame(A=c(21,22,23,24,25,26,27))
mytable$F<-celsius2fahrenheit(mytable[,"A"])
mytable
```

## Data frames and NA's

Computation of a new column from columns of a dataframe

```{r, echo=TRUE, eval=TRUE}
mytable$G<-mytable$A+mytable$F #note: adding C and F temperature is nonsensical though
mytable$Gsquare<-mytable$G^2 #note how you write an exponent "^" in R
mytable$A*mytable$F # or a multiplication "*"
```

Similarly we can apply our BMI computation to a data frame with heights and weights

```{r, echo=TRUE, eval=TRUE}
bmidf<-data.frame(
  h=c(1.8,1.7,2,1.9),
  w=c(70,70,95,100))
```

We add the result of computing BMI directly as a new column "BMI" in our data.frame

```{r, echo=TRUE, eval=TRUE}
bmidf$BMI<-bmi.calc(h=bmidf$h,
                    w=bmidf$w)
```

NA is for unknowns !

Suppose the 2nd person of our sample didn't share his/her weight with us

```{r, echo=TRUE, eval=TRUE}
bmidf$w[2]<-NA #NA is for unknowns
bmidf$BMI<-bmi.calc(h=bmidf$h,
                    w=bmidf$w)
#You see the BMI could therefore not be computed
bmidf
```

For some functions you would still want to compute a value while ignoring the NA's

The mean is a classical example

```{r, echo=TRUE, eval=TRUE}
mean(bmidf$h) #works
mean(bmidf$w) #but returns NA because of one value not reported
```

You can explicitly ask to compute without the NA's:

```{r, echo=TRUE, eval=TRUE}
mean(bmidf$w, na.rm=TRUE) #now works!
```

Using complete cases

For some data frame made of surveyed values where different variables are filled in sparsely, it is important you get access only to entirely completed individuals

```{r, echo=TRUE, eval=TRUE}
complete.cases(bmidf) #returns a logical indicating whether the row 
# has not a singleNA
class(complete.cases(bmidf))
#Note that with logicals, TRUE is 1 and FALSE is zero. Thus

sum(complete.cases(bmidf))

#You can use this logical to subset the rows
# and have a "clean" df
bmidf2<-bmidf[complete.cases(bmidf),] #read this as "select complete cases rows with all columns
bmidf2
```

## Environment listing and management

We have now created a bunch of objects which we can see in the Environment window of RStudio.

In the console we can also see them with

```{r, echo=TRUE, eval=TRUE}
ls()
```

And any of these objects can be removed with

```{r, echo=TRUE, eval=TRUE}
rm()
#for example
rm(mytable)
```

In the environment window of RStudio you also see the structure of objects (when displayed as a list not a grid)

From the console you use the structure function str() to get the same info

```{r, echo=TRUE, eval=TRUE}
str(bmidf)
```

## Viewing data frame

```{r, echo=TRUE, eval=TRUE}
View(bmidf)
```

is the most pleasant interactive way to view a data frame

But be careful if many rows or columns !

The classical console way is simply

```{r, echo=TRUE, eval=TRUE}
bmidf
```

In case of a large vector or df there will be a limited display of 1000 values (default) in console

Suppose you have a vector of 1002 values

```{r, echo=TRUE, out.lines = 6}
mydf<-data.frame(z=1:502, zrev=502:1)
mydf
```

```{r, echo=TRUE}
#[ reached getOption("max.print") -- omitted 2 entries ]
```

You can change the default using

```{r, echo=TRUE}
 options(max.print=1500)
```

but one rarely does this

Most of the times you want a sneak preview in your data from the top

```{r echo=TRUE}
# head() returns the first rows (5 default) rows:
head(mydf)
head(mydf,8)
```

or the bottom:

```{r echo=TRUE}
# tail() the last ones :
tail(mydf)
tail(mydf, 7)
```

or some random records:

some(mydf)
