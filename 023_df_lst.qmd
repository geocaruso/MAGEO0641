# Data frames and lists {#sec-data-frames-and-lists}

## Data frames

### A Data frame ... your beloved spreadsheet

```{r echo=TRUE, eval=TRUE}
df<-data.frame() #an empty one

df<-data.frame(a = 1:5,
           b = letters[1:5],
           c = rnorm(n = 5))
df
```

See how it is summarized. Basically summarizing each vector in columns.

```{r echo=TRUE, eval=TRUE}
summary(df)
```

### Accessing and subsetting

**!!! THIS IS EXTREMELY IMPORTANT !!!** **!!! Don't forget the comma**

Identifying

```{r echo=TRUE, eval=TRUE}
df[,"b"] #all rows but only the column named "b"
df$b #same !
```

Subsetting based on position

```{r echo=TRUE, eval=TRUE}
df$c[1:2] #subsetting a vector: only first 2 values
df[1:2,"b"]
df[1:2,] #first 2 records, all variables. Don't forget the comma !
```

Subsetting specific rows (not range as above):

```{r echo=TRUE, eval=TRUE}
df[1:3,"b"]
df[c(1,3),"b"]
```

Each dataframe column must have the same number of elements.

(Enjoy this condition after thinking of how many times you had misaligned and columns of different lengths in Ms Exc..)

```{r echo=TRUE, eval=TRUE, error=TRUE}
z<-c("Mom","Dad",3) #remember each vector as only one type of data, so this is coerced to character

df$z<-z #Should not work becouse of different length
```

```{r echo=TRUE, eval=TRUE, error=TRUE}
length(df$a)
length(z)

#Beware. Length applied to the whole df means the number of columns!
length(df) #i.e. a b and c
```

While length is general, for a data frame you can rather compute number of rows and columns this way

```{r echo=TRUE, eval=TRUE, error=TRUE}
nrow(df)
ncol(df)
dim(df)
nrow(df)==dim(df)[2] #What do you think?

#But these won't work for a vector:
dim(df$a)
nrow(df$a)
```

Often times data frames have more complicated column names. It is useful to access those directly.

This is also the way you change the name of a column:

```{r echo=TRUE, eval=TRUE, error=TRUE}
names(df)[2]<-"blabla"
df
```

## Lists

A List is a more general object than a dataframe.

All "columns" are not necessarily

-   of the same length
-   nor of the same class

```{r echo=TRUE, eval=TRUE, error=TRUE}
mylist<-list(a = 1:5,
             b = letters[1:5],
             c = rnorm(n = 5))
mylist
summary(mylist)
```

```{r echo=TRUE, eval=TRUE, error=TRUE}
mylist<-list(a = 1:3,#we removed 2 elements here
             b = letters[1:5],
             c = rnorm(n = 5))
mylist
summary(mylist)
```

```{r echo=TRUE, eval=TRUE, error=TRUE}
length(mylist) #number of elements in list
length(mylist$b) #number of objects within that element of the list
```

### Into the lists: \[\[ \]\] vs \[ \]

```{r echo=TRUE, eval=TRUE, error=TRUE}
mylist[2] # getting the list element displayed
class(mylist[2])  # you see it is a list element
mylist[[2]] # getting the corresponding vector
class(mylist[[2]]) # you now see it is a character vector
```

And now subsetting:

```{r echo=TRUE, eval=TRUE, error=TRUE}
mylist
mylist[[2]][1] #1st element of the 2nd element of the list
mylist[[1]][2] #2nd element of the 1st element of the list
M<-mylist[[3]]
M[1] #Subsetting just as any vector
```
