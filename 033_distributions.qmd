# Statistical distributions

## Continuous distributions:

### Uniform distribution

The uniform distribution is one of the simplest distribution of a continuous (ratio or interval) variable. Although it is rare in practice that each value along a continuum has the same chance of occurring than all others, it is a base distribution to know of. Each value has the same probability of occurrence, which is a simple case also to show how we can compute density functions, probabilities and cumulative distributions.

To generate a uniform a function, we feed the `runif()` function with a number of observations. All generative distribution are of the form `r...()`. Like for the other generating functions, the mean is 0 and the standard deviation is 1 by default, which provides us with some control on the range:
```{r}
set.seed(101)
u<-runif(1000)
hist(u)
```

The histogram show that each value (intervals) is similarly frequent.
Rather than/or on top of a histogram, we often plot densities, which is a smoother representation using a local density (kernel density i.e. using a bandwidth instead of the strict silos of the histogram). In R we use the `density()` function and use its returned values for plotting:

```{r}
density(u)
plot(density(u))
```

With the uniform distribution, the probability of drawing a number below a given value will be given by the quantile of that particular value.
We can see the **empirical cumulative distribution function (ecdf)** is a straight line where quantiles equal probabilities:

```{r}
ecdf(u)
plot(ecdf(u))
```

Instead of simulating, R knows the theoretical functions as well. We can return the probabilities corresponding to some quantile values, using `punif()` without creating numbers before. We can use such `p...()` functions to compare the occurrence of an empirical outcome to its probability within a theorized distribution 

```{r}
punif(q=c(0.01,0.25,0.5,0.75,0.99))
punif(min=50, max=200, q=c(100)) #the probability of drawing a number below 100 knowing the min and max are 50 and 200 and the distribution uniform is 1/3 (the range being 150 and 100 being 50 beyond the max)
```

Similarly to our density plot, the density of a known distribution is obtained from `d...()`,i.e.

```{r}
dunif(c(0.01,0.25,0.5,0.75,0.99),min=0, max=1)
```

### Normal distribution

Central limit theorem

normal (explain +-1 sd +-2 sd)


### t-Student distribution


## Discrete distributions

### Discrete uniform distribution

### Discrete binomial distribution

Throwing a coin holds two possible values: Bernoulli Bernoulli to Binomial
https://math.stackexchange.com/questions/838107/what-is-the-difference-and-relationship-between-the-binomial-and-bernoulli-distr

### Discrete Poisson distribution

## Shape of distributions:

### Skewness

### Kurtosis

### QQ plots
Comparing to a theoretical distribution


<!-- # Define the range of lambda values (from 0.2 to 2 in steps of 0.2) -->
<!-- lambda_values <- seq(0.2, 2, by = 0.2) -->

<!-- # Define the range of n values (from 0 to 4) -->
<!-- n_values <- 0:4 -->

<!-- # Function to calculate Poisson probabilities for a given lambda -->
<!-- calc_probs <- function(lambda) { -->
<!--   sapply(n_values, function(n) dpois(n, lambda)) -->
<!-- } -->

<!-- # Apply the function to each lambda value and transpose the result -->
<!-- prob_matrix <- t(sapply(lambda_values, calc_probs)) -->

<!-- # Convert the matrix to a data frame for better readability -->
<!-- prob_df <- as.data.frame(prob_matrix) -->

<!-- # Set the row names to the corresponding lambda values -->
<!-- rownames(prob_df) <- paste("Î» =", lambda_values) -->

<!-- # Set the column names to the corresponding n values -->
<!-- colnames(prob_df) <- paste("n =", n_values) -->

<!-- # Print the data frame -->
<!-- options(scipen = 999) -->
<!-- print(prob_df) -->
<!-- options(scipen = 0) -->

