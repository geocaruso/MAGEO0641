# Getting started

## R, RStudio and its interface

In class demonstration of how to

-   Get R and RStudio installed
-   Navigating the R studio interface
-   Scripting area, console, files,...
-   Using colors and TOC outline in RStudio

## Projects and workflows

Let's compute a **value** in the console and store it to an **object** first

```{r echo=TRUE}
#This is a comment
1+2 #This is also a comment
a<-3+4
a
```

See that we now have an object in the environment!

## Working directory!!!

Suppose we want to produce a text from the above and save it to a file:

```{r echo=TRUE}
a_sentence<-paste("I have computed a sum, which equals", a)
a_sentence #Let's see this in the console
cat(a_sentence,file="brol/a_sentence.txt")
```

Where is the file? the directory? Have you been able to run this?

**Always indicate where you work!**

The classical way is 

```{r echo=TRUE, eval=FALSE}
getwd() #get (default) working directory
setwd("/Users/geoffrey.caruso/Dropbox/GitHub/MAGEO0641/brol") #set working directory to YOUR OWN NETWORK SPACE HERE!
```

There is a more practical way in RStudio: Make an .Rproj from/to a directory

You can create a directory in your finder/file explorer, or create a directory or subdirectory from within the R console. This will be very useful at a more advanced level when you create many outputs and directory names result from some data processing. Think of processing something across many countries/cities.

```{r echo=TRUE, eval=FALSE}
dir.create("brol")
dir.create("Today")
```

## Commented \R scripts vs markdown documents

The above is a **commented script, using \#**, which you can save as an **.R** file and re-run later.

The problem with this approach is that you won't see results of the codes until you run it. So you can't really comment your output (although many, and I, would still do it) thus mixing explanation of what is done and interpretation.

A more advanced approach is to make a document where you integrate text, **code chunks** and results of the code.The text can thus document what is going to be done and the results, while the code chunks can thus document both the code itself and its result as it is processed by the Console.

Let's have a look at the structure of this syllabus, written using Quarto markdown.




